instruction,output,input,data_source
Find all tasks related to customer ABC Inc. and summarize them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123"", ""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the customer CustomerABC and create action items from the search results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
 Retrieve work items with the highest severity blocker and prioritize them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""blocker""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all work items in the testing stage that are related to parts PART-1 and PART-2 and summarize them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""testing""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-1"", ""PART-2""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve work items associated with the Rev organization Rev-789 and tickets that need a response, and create a summary.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""Rev-789""
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items with medium severity and owned by user USER-789, and then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""medium""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-789""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve work items in the design stage and owned by USER-456, then create action items from the results.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""design""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-456""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current sprint ID and then find work items in that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to ProjectX and summarize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectX""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with PROD-123 and PROD-456 in the applies_to_part filter and have p1 or p2 priority, and then create action items from the results.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PROD-123"", ""PROD-456""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1"", ""p2""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get a list of work items with task type and owned by USER-789 and USER-456.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": []
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""task""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USER-789"", ""USER-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to CustomerXYZ, find the work items related to the search results, and then summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all work items with task type and create action items from them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": []
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""task""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": []
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get a list of work items similar to TKT-456 and prioritize them.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": []
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-456""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": []
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items associated with the Rev organizations REV-123 and REV-456 that need a response, and then summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": []
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-123"", ""REV-456""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": True
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": []
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve work items with low severity and owned by USER-123, and then add them to the current sprint.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""low""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-123""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_ids"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectY,"" find the work items related to the search results, and then prioritize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectY""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current sprint ID and then retrieve work items associated with that sprint and create a summary.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current user's ID and then find all work items owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items associated with a specified sprint ID and then summarize them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ProductABC, retrieve work items related to the search results, and then add them to the current sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProductABC""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ticket type and associated with ChannelA and ChannelB source channels, then create action items from the results.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""ticket""
      },
      {
        ""argument_name"": ""ticket.source_channel"",
        ""argument_value"": [""ChannelA"", ""ChannelB""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get a list of work items in the review stage under part PART-456, and then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PART-456""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to CustomerXYZ and retrieve work items associated with the search results, then add them to a specified sprint.
","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items associated with Issue-123 and Issue-456, and then summarize them. Output:","[
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""Issue-123"", ""Issue-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all work items with high severity that need a response and owned by USER-789 and USER-456.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""high""
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USER-789"", ""USER-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ProjectZ, retrieve work items associated with the search results, and then get the current sprint ID.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and then find work items associated with that sprint and have p3 priority.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p3""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ProductX, retrieve work items associated with the search results, and then summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProductX""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items associated with ChannelC and ChannelD source channels that need a response and have high severity, and then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.source_channel"",
        ""argument_value"": [""ChannelC"", ""ChannelD""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items of type issue owned by USER-456 and have p2 priority, and then create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""issue""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-456""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p2""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ProjectA, retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectA""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items in the planning stage under part PART-789 owned by USER-123 and create action items from them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""planning""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PART-789""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USER-123""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and then find all work items of type ""task"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""task]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""Customer123,"" retrieve work items associated with the search results, and summarize them. Output:","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p1"" priority and ""p3"" priority and create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1"", ""p3""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Get work items associated with ""ProjectB"" and ""ProjectC,"" and then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""ProjectB"", ""ProjectC""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Search for objects related to ""Part123,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part123""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for work items with the keyword ""urgent"" in their descriptions and add them to the current sprint.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""urgent""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve work items associated with the Rev organization ""REV-123"" and owned by the user ""DEVU-789."" Summarize them and prioritize by severity.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""REV-123""
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""DEVU-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all issue work items that need a response and are associated with the Rev organization REV-789,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": true
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""REV-789""
            },
            {
                ""argument_name"": ""type"",
                ""argument_value"": ""issue""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items with specific part IDs PART-003 and PART-004 that are owned by the user DEVU-123.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PART-003"", ""PART-004""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""DEVU-123""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items of type ticket that need a response and are associated with the Rev organization REV-456. Summarize these tickets and prioritize them.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": true
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""REV-456""
            },
            {
                ""argument_name"": ""type"",
                ""argument_value"": ""ticket""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items with a specific part ID PART-005 and a priority of p2. Summarize these work items and create actionable tasks from the summary.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""PART-005""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": ""p2""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items that are similar to TKT-789 and add them to the current sprint. Get the ID of the current sprint and prioritize the added work items.,"[
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items with a specific part ID PART-004 that are in the in-progress stage. Summarize them and create actionable tasks from the summary.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""PART-004""
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": ""in-progress""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
 Retrieve work items with a specific part ID PART-006 and prioritize them by severity.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""PART-006""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items associated with the Rev organization REV-123 that need a response and are of priority p2. Summarize them.,"[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""REV-123""
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": true
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": ""p2""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items in the ""design"" stage owned by ""USER-789"" and have ""p2"" priority, and then get the current sprint ID.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""design""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-789""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p2""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""Part456,"" retrieve work items associated with the search results, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items with ""medium"" severity and associated with ""ChannelX"" and ""ChannelY"" source channels, and then create action items from them.
","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""ticket.source_channel"",
        ""argument_value"": [""ChannelX"", ""ChannelY""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectD,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectD""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-999""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items of type ""task"" and owned by ""USER-123,"" and then retrieve the ID of the current sprint.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""task""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-123""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items in the ""development"" stage under part ""PART-789"" and owned by ""USER-456"" and ""USER-789,"" and then summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""development""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PART-789""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USER-456"", ""USER-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""Part789,"" retrieve work items associated with the search results, and prioritize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part789""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p0"" priority and ""p1"" priority and owned by ""USER-123,"" and then create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-123""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and then find all work items of type ""issue"" owned by that user and have ""p3"" priority.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""issue""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p3""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProductY,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProductY""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p2"" priority owned by ""USER-123,"" retrieve the current sprint ID, and then add them to that sprint.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p2""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-123""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Search for objects related to ""PartXYZ,"" retrieve work items associated with the search results, and create action items from them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""PartXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p0"" priority and ""p1"" priority, retrieve the current sprint ID, and then add them to that sprint.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID, find all work items with ""high"" severity owned by that user, and create action items from them.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""high""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Get the current user's ID, find all work items in the ""development"" stage, owned by that user, and have ""p1"" priority.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""development""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ComponentX,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ComponentX""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items in the ""testing"" stage owned by ""USER-789"" and have ""p0"" priority, and then get the current sprint ID.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""testing""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-789""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p0""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProductA,"" retrieve work items associated with the search results, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProductA""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p1"" priority and ""p3"" priority and owned by ""USER-123,"" and then create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1"", ""p3""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-123""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and then find all work items of type ""ticket"" associated with ""REV-123.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""ticket""
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""REV-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items with ""low"" severity and associated with ""email"" source channel, and then create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""low""
      },
      {
        ""argument_name"": ""ticket.source_channel"",
        ""argument_value"": ""email""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ComponentY,"" retrieve work items associated with the search results, and prioritize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ComponentY""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items with ""p0"" priority and ""p2"" priority and create action items from them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p2""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items with ""medium"" severity and associated with ""chat"" source channel, and then summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""medium""
      },
      {
        ""argument_name"": ""ticket.source_channel"",
        ""argument_value"": ""chat""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerXYZ,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get work items associated with ""OrganizationA,"" and then summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""OrganizationA""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectC,"" retrieve work items associated with the search results, and create action items from them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectC""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items in the ""in-progress"" stage under part ""PART-789,"" owned by ""USER-456,"" and have ""p2"" priority, and then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PART-789""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-456""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p2""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and then find all work items of type ""task"" owned by that user and have ""p3"" priority.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p3""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProductX,"" retrieve work items associated with the search results, and add them to a specified sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProductX""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""Sprint-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all tasks assigned to users in the 'Development' team.,[],"You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items created in the last 24 hours.,[],"You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the project details for the project named 'Alpha Project.,[],"You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the total number of unresolved issues in the system.,[],"You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize the status of all issues in the Review stage for part PROJ-789,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""Review""
         },
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""PROJ-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for issues with the label CustomerFeedback and create tasks for actionable insights.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CustomerFeedback""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all high-priority issues reported by the user Bob in the last month and prioritize them,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""high""
         },
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": ""Bob""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Generate a summary of the most recent comments on tasks related to ProjectY,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectY""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve a list of tasks that were last modified by the user Charlie,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""last_modified_by"",
            ""argument_value"": ""Charlie""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all tasks assigned to the user John in the In Progress stage.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""John""
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""In Progress""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues in the To Do stage.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""To Do""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all high-priority issues reported by user Bob,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""high""
         },
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": ""Bob""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues in the Testing stage,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""Testing""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for all tasks reported by user David,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": ""David""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks that are not assigned to any user,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""unassigned""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues in the In Progress stage,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""In Progress""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the sprint for the user's current iteration.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Generate a summary of tasks with the label Bug,"[
         {
            ""argument_name"": ""labels"",
            ""argument_value"": [""Bug""]
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues in the Review stage.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""Review""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for all tasks reported by user George,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": ""George""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks that are not assigned to any user,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""unassigned""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks assigned to user Ivy in the In Progress stage.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""Ivy""
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""In Progress""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": ""task""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items similar to FEAT-789,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""FEAT-789""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for an object with the name Customer123,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer123""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text Task description,"[
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""Task description""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user,"[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the To Do stage owned by user DEVU-789,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""To Do""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-789""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Filter work items with priority P0 and owned by user DEVU-789,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""P0""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-789""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items with severity High and in the Review stage,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""High""]
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""Review""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize work items with the label Feature,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""labels"",
            ""argument_value"": [""Feature""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items assigned to user DEVU-123 with priority P2,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-123""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""P2""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize work items with severity Medium and in the In Progress stage,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""Medium""]
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""In Progress""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items with severity Low and owned by user DEVU-456,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""Low""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-456""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items related to Rev organizations REV-456 and REV-789,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.rev_orgs"",
            ""argument_value"": [""REV-456"", ""REV-789""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items with priority P1 and associated with Rev organization REV-123,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""P1""]
         },
         {
            ""argument_name"": ""issue.rev_orgs"",
            ""argument_value"": [""REV-123""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items similar to TKT-789 and created by user DEVU-456,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""TKT-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": [""DEVU-456""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the Testing stage with severity Medium,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""Testing""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""Medium""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize work items with priority P0 and in the Done stage,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""P0""]
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""Done""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items assigned to user DEVU-123 with priority P2,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-123""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""P2""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
,,"You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all tasks related to customer ABC Inc. and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ABC Inc.""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all high-priority issues from the current sprint.," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
 Create tasks from a recent team meeting's minutes and prioritize them.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Team meeting minutes...""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve tasks owned by a specific user and add them to the ongoing sprint.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Identify similar work items to a specific ticket and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all high priority tasks related to parts ""FEAT-123"" and ""PROD-456""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p0"", ""p1""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-123"", ""PROD-456""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to ""ENH-789"" and create actionable tasks from the retrieved data."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""ENH-789""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all tickets from the source channel ""email"" and summarize them."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""email""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Prioritize tasks similar to ""PROD-987"" and add them to the current sprint."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-987""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[2]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the customer ""CustomerX"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CustomerX""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks with severity ""blocker"" and add them to the current sprint."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve work items similar to ""FEAT-456"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-456""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for the user ""DEVU-789"" and list all work items created by them."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": [""DEVU-789""]
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and find all tasks owned by them in the ""development"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Prioritize tasks with severity ""high"" and add them to the sprint named ""Sprint-XYZ""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""Sprint-XYZ""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items in the ""validation"" stage associated with Rev organization ""REV-456"" and summarize them."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""validation""]
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": [""REV-456""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-789"" and list their associated source channels."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to ""PROD-123"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-123""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Identify tasks owned by the current user and with the priority ""p1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""CAPL-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CAPL-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks created by ""DEVU-456"" with severity ""medium"" and add them to the sprint named ""NextSprint""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"":","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve tasks from the Rev organization ""REV-789"" with severity ""low"" and add them to the current sprint."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": [""REV-789""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks associated with the part ""ENH-123"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Prioritize tasks similar to ""TKT-456""."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and find tasks owned by them in the ""testing"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""testing""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find objects related to the customer ""Cust456"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-789"" and list their associated source channels."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user with priority ""p2""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p2""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Identify tasks with severity ""medium"" and add them to the current sprint."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks in the ""design"" stage associated with Rev organization ""REV-789"" and summarize them."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""design""]
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": [""REV-789""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current user's ID and find tasks owned by them with severity ""high""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""CAPL-123"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CAPL-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user in the ""implementation"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""implementation""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""PROD-456"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-456""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List tasks with severity ""blocker"" and add them to the sprint named ""CriticalFix""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""CriticalFix""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve tasks similar to ""TKT-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks related to the part ""PROD-123"" and list their associated source channels."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Prioritize tasks with severity ""high"" and add them to the current sprint."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[2]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find objects related to the customer ""Cust789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""FEAT-456"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-456""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and find tasks owned by them in the ""design"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""design""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Search for objects related to the part ""CAPL-456"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CAPL-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user with priority ""p1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""PROD-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List tasks with severity ""medium"" and source channel ""email"" associated with the Rev organization ""REV-456""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""email""]
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": [""REV-456""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Find tasks similar to ""TKT-987"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-987""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""CAPL-789"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CAPL-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Prioritize tasks owned by the current user with severity ""high""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""testing"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""testing""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find objects related to the customer ""Cust123"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""FEAT-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current user's ID and find tasks owned by them in the ""design"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""design""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""PROD-789"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks with severity ""low"" and add them to the current sprint."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-456"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
": Find tasks owned by the current user with priority ""p2""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p2""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-123"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-123""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""development"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find objects related to the part ""PROD-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""ENH-123"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""ENH-123""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks with severity ""blocker"" and source channel ""web"" associated with the Rev organization ""REV-789""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""web""]
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": [""REV-789""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""review"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""review""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current user's ID and find tasks owned by them in the ""deployment"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""deployment""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks created by user ""DEVU-456"" and prioritize them by severity."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": [""DEVU-456""]
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks related to the part ""PROD-456"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks owned by the current user in the ""planning"" stage and add them to the sprint named ""Sprint 1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""planning""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""Sprint 1""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
 Retrieve the current user's ID and find tasks owned by them that need a response.," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": true
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""FEAT-789"" and list their associated Rev organizations and priorities."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and retrieve similar tasks to ""TKT-456""."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the customer ""Cust456"" and prioritize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust456""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the customer ""Cust456"" and prioritize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust456""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve tasks similar to ""FEAT-123"" and find their associated Rev organizations."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks with severity ""high"" and add them to the sprint named ""HighPriority""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""HighPriority""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-789"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them with severity ""blocker""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Find tasks similar to ""TKT-123"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""CAPL-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CAPL-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and prioritize tasks similar to ""PROD-789""."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""implementation"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""implementation""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the customer ""Cust789"" and prioritize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""Cust789""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks similar to ""FEAT-123"" and prioritize them, then add them to the sprint named ""NextRelease""."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-123""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""NextRelease""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""TKT-456"" and create actionable tasks from them, then summarize these tasks."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and find tasks owned by them with severity ""p1"" in the ""emergency"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""emergency""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-123"" and list their associated Rev organizations and priorities."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks similar to ""FEAT-789"" and prioritize them, then add them to the sprint named ""FutureRelease""."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
   ","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List tasks with severity ""high"" and owned by user ""DEVU-789""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add tasks similar to ""TKT-456"" to it."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks with severity ""blocker"" and source channel ""email""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""email""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""TKT-789"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks owned by the current user with severity ""medium""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-456"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user with priority ""p2""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p2""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-123"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-123""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""deployment"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""deployment""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks with severity ""blocker"" and owned by user ""DEVU-456""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add tasks similar to ""TKT-789"" to it."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks with severity ""high"" and source channel ""email""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""email""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""TKT-123"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks owned by the current user with severity ""low""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-456"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user with priority ""p1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-456"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-456""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""development"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List tasks with severity ""high"" and owned by user ""DEVU-789""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add tasks similar to ""TKT-456"" to it."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks with severity ""blocker"" and source channel ""email""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""email""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-789"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""TKT-789"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Identify tasks owned by the current user with severity ""low""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-789"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-789""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks owned by the current user with priority ""p1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-456"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-456""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user's ID and list tasks owned by them in the ""development"" stage."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List tasks with severity ""medium"" and owned by user ""DEVU-123""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-123""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current sprint ID and add tasks similar to ""TKT-789"" to it."," [
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find tasks with severity ""high"" and source channel ""chat""."," [
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""ticket.source_channel"",
                ""argument_value"": [""chat""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""PROD-456"" and list their associated Rev organizations."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""PROD-456""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get tasks similar to ""TKT-456"" and create actionable tasks from them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify tasks owned by the current user with severity ""low""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the part ""ENH-123"" and summarize them."," [
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ENH-123""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Find tasks owned by the current user with priority ""p1""."," [
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""issue.priority"",
                ""argument_value"": [""p1""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for tasks similar to ""FEAT-789"" and summarize them."," [
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""FEAT-789""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and prioritize the objects associated with it.," [
        {
            ""tool_name"": ""get_sprint_id"",
            ""arguments"": []
        },
        {
            ""tool_name"": ""prioritize_objects"",
            ""arguments"": [
                {
                    ""argument_name"": ""objects"",
                    ""argument_value"": ""$$PREV[0]""
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the part 'CAPL-456' and add those work items to the current sprint," [
        {
            ""tool_name"": ""search_object_by_name"",
            ""arguments"": [
                {
                    ""argument_name"": ""query"",
                    ""argument_value"": ""CAPL-456""
                }
            ]
        },
        {
            ""tool_name"": ""add_work_items_to_sprint"",
            ""arguments"": [
                {
                    ""argument_name"": ""work_ids"",
                    ""argument_value"": ""$$PREV[0]""
                },
                {
                    ""argument_name"": ""sprint_id"",
                    ""argument_value"": ""$$PREV[1]""
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks with severity 'blocker' associated with the Rev organization 'REV-456,"  [
        {
            ""tool_name"": ""works_list"",
            ""arguments"": [
                {
                    ""argument_name"": ""ticket.severity"",
                    ""argument_value"": [""blocker""]
                },
                {
                    ""argument_name"": ""ticket.rev_org"",
                    ""argument_value"": [""REV-456""]
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and list tasks owned by them in the 'testing' stage,"  [
        {
            ""tool_name"": ""who_am_i"",
            ""arguments"": []
        },
        {
            ""tool_name"": ""works_list"",
            ""arguments"": [
                {
                    ""argument_name"": ""owned_by"",
                    ""argument_value"": ""$$PREV[0]""
                },
                {
                    ""argument_name"": ""stage.name"",
                    ""argument_value"": [""testing""]
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for tasks in the 'development' stage related to parts 'FEAT-789' and summarize them," [
        {
            ""tool_name"": ""works_list"",
            ""arguments"": [
                {
                    ""argument_name"": ""stage.name"",
                    ""argument_value"": [""development""]
                },
                {
                    ""argument_name"": ""applies_to_part"",
                    ""argument_value"": [""FEAT-789""]
                }
            ]
        },
        {
            ""tool_name"": ""summarize_objects"",
            ""arguments"": [
                {
                    ""argument_name"": ""objects"",
                    ""argument_value"": ""$$PREV[0]""
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks owned by the current user with severity 'high' and associated with the Rev organization 'REV-789'," [
        {
            ""tool_name"": ""who_am_i"",
            ""arguments"": []
        },
        {
            ""tool_name"": ""works_list"",
            ""arguments"": [
                {
                    ""argument_name"": ""owned_by"",
                    ""argument_value"": ""$$PREV[0]""
                },
                {
                    ""argument_name"": ""ticket.severity"",
                    ""argument_value"": [""high""]
                },
                {
                    ""argument_name"": ""ticket.rev_org"",
                    ""argument_value"": [""REV-789""]
                }
            ]
        }
    ]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Show me all high priority tickets created by user 'USR-123'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""USR-123""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the issues owned by me in the 'ready for review' stage?," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""ready for review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List tasks related to the customer 'Acme' that need a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Acme""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items similar to 'PROD-789' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Show me tasks needing response from Rev organization 'REV-456'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks created by user 'USR-987' with medium severity.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""USR-987""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find similar work items to 'TKT-123', summarize them, create actionable tasks from the summary, prioritize those tasks, add them to the current sprint, and get the ID of the current sprint."," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  },
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[3]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[5]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items with severity 'blocker' and owned by user 'DEVU-123'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""blocker""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""DEVU-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks similar to 'task-001' and prioritize them.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-001""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items in the 'In Progress' stage and need a response?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": []
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'customer123' and create actionable tasks from the results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""customer123""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add work items with severity 'high' and owned by 'DEVU-123' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""high""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""DEVU-123""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks similar to 'task-002' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-002""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with type 'issue' and severity 'medium'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"""Search for objects related to 'part-XYZ' and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""part-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'To Do' stage owned by user 'DEVU-456',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""DEVU-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'client-ABC' and prioritize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""client-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current sprint ID and add tasks with priority 'high' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues similar to 'issue-XYZ' and create tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""issue-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'low' created by user 'DEVU-789'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with severity 'medium'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'project-123' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""project-123""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks in the 'Review' stage.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-456' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-456""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'Ready for Deployment' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Ready for Deployment""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'medium' that need a response.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": []
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with priority 'high'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'project-A' and summarize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""project-A""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for client-XYZ' and prioritize them.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for client-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with type 'ticket' and associated with 'Rev-456'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""ticket""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""Rev-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add issues with severity 'blocker' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks similar to 'task-003' and create actionable tasks from the summary,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-003""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-789' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-789""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with severity 'high' and type 'issue'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues in the 'Review' stage under part 'PROD-456'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-456""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'customer-XYZ' and create actionable tasks from the results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""customer-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current sprint ID and add issues with severity 'medium' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks similar to 'task-004' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-004""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'high' and created by user 'DEVU-012'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-012""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with priority 'low'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-ABC' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'blocker'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-789' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-789""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'Done' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Done""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues in the 'Review' stage under part 'PROD-456'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-456""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'customer-XYZ' and create actionable tasks from the results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""customer-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current sprint ID and add issues with severity 'medium' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks similar to 'task-004' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-004""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'high' and created by user 'DEVU-012'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-012""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with priority 'low'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-ABC' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'blocker'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-789' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-789""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'Done' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Done""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by 'DEVU-789' in the 'In Progress' stage with severity 'medium'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'project-456' and prioritize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""project-456""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add tasks with priority 'low' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks similar to 'task-005' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""task-005""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'high' and created by user 'DEVU-345'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-345""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with priority 'medium'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""medium""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-XYZ' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'blocker'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-890' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-890""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'To Do' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks created by 'DEVU-567' in the 'Review' stage.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-567""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'customer-ABC' and create actionable tasks from the results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""customer-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add tasks with priority 'high' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues similar to 'issue-005' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""issue-005""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'medium' and created by user 'DEVU-789'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and return work items owned by that user with priority 'high'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-DEF' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-DEF""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""tool_name"": ""sprint_id"",
        ""arguments"": [
          {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks with priority 'medium',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""medium""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-ABC' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'To Do' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'low' and created by 'DEVU-456' in the 'To Do' stage.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-456""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'project-XYZ' and prioritize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""project-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add issues with severity 'low' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""low""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues similar to 'issue-006' and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""issue-006""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
What are the work items with severity 'high' and created by user 'DEVU-123'?,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'module-PQR' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""module-PQR""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""tool_name"": ""sprint_id"",
        ""arguments"": [
          {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks with priority 'high'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting notes for project-DEF' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting notes for project-DEF""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'In Progress' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all work items related to 'ProjectX' with priority 'high' and owned by the current user, then summarize them.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""ProjectX""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find all tasks created by 'DEVU-789' with severity 'medium' and add them to the sprint with the lowest priority.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""medium""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Brainstorming ideas for ProjectY' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Brainstorming ideas for ProjectY""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'Pending Approval' stage and owned by 'DEVU-456'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Pending Approval""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and return work items owned by that user with priority 'high' and in the 'In Progress' stage.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'ModuleZ' and prioritize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ModuleZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with priority 'blocker' and owned by 'DEVU-123',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting outcomes for ProjectA' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting outcomes for ProjectA""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'Review' stage related to 'ModuleB'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""ModuleB""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and add issues with severity 'medium' and owned by 'DEVU-789' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with priority 'high' that need a response, created by 'DEVU-456'.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'CustomerXYZ' and create actionable tasks from the information found.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'blocker' from the customer 'UltimateClient'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""UltimateClient""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add tasks with priority 'medium' created by 'DEVU-789' to that sprint,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all work items with priority 'p1' created by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Meeting minutes with ProjectA team' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting minutes with ProjectA team""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and return work items owned by that user with priority 'low'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'ModuleXYZ' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ModuleXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks in the 'To Do' stage created by 'DEVU-123'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and return all issues with severity 'high' owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and return all tasks owned by that user with priority 'low' and in the 'In Progress' stage.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'medium' owned by 'DEVU-456' and add them to the current sprint.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'ProjectZ' and prioritize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'high' and owned by 'DEVU-123' in the 'To Do' stage.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and add issues with severity 'low' owned by 'DEVU-789' to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Feedback session for ProjectB' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Feedback session for ProjectB""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""tool_name"": ""sprint_id"",
        ""arguments"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and return all tasks with priority 'high' owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all tasks with priority 'high' and owned by 'DEVU-456', then find similar work items and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks created by 'DEVU-123' in the 'In Progress' stage and add them to the current sprint.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items with priority 'p2' and owned by 'DEVU-789', then create issues from the summary.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ProjectC' and return their IDs, then prioritize those objects.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectC""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and return all tasks with priority 'medium' owned by that user in the 'To Do' stage.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'high' owned by 'DEVU-123' and add them to the current sprint.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and return all tasks with priority 'low' and in the 'To Do' stage owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Release planning for ProjectX' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Release planning for ProjectX""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all issues with severity 'low' and owned by 'DEVU-456', then create tasks from the information found","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all issues with severity 'blocker' and add them to the current sprint, then find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks assigned to that user in the 'Completed' stage.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Completed""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all issues reported by customer 'CustomerX' and prioritize them based on severity.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks with priority 'high' and owned by 'DEVU-789', then create issues from the summary.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'Backlog' stage assigned to that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Backlog""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all issues with severity 'medium' and owned by 'DEVU-456', then find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all tasks with priority 'low' and owned by 'DEVU-123', then create actionable tasks from the summary.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all tasks with priority 'p1' and created by 'DEVU-789', then summarize them and find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all issues with priority 'p0' and owned by 'DEVU-456', then prioritize them based on severity","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p0""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ProjectABC' and return their IDs, then create actionable tasks from the results.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectABC""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'In Progress' stage assigned to that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all issues reported by customer 'CustomerY' and prioritize them based on severity.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerY""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks with priority 'p2' and owned by 'DEVU-123', then create issues from the summary","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'Backlog' stage owned by that user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Backlog""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all issues with severity 'medium' and owned by 'DEVU-456', then find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ProjectDelta' and retrieve their IDs, then create actionable tasks from the results","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectDelta""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'Review' stage assigned to that user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ModuleGamma' and summarize them, then create actionable tasks from the summary","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ModuleGamma""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all tasks with priority 'p2' and owned by 'DEVU-456', then find similar work items","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'In Progress' stage owned by that user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all issues reported by customer 'CustomerX' and prioritize them based on severity.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ProjectOmega' and return their IDs, then create actionable tasks from the results.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectOmega""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve all issues reported by customer 'CustomerZ' and prioritize them based on severity.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'In Review' stage owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Review""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all issues with severity 'low' and owned by 'DEVU-789', then find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      },
      {
        ""argument_name"": ""issue.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ProjectAlpha' and return their IDs, then create issues from the results.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectAlpha""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'Completed' stage owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Completed""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve all tasks with priority 'p1' and created by 'DEVU-123', then summarize them and find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'ModuleDelta' and return their IDs, then prioritize them based on urgency.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ModuleDelta""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the ID of the current user and retrieve all tasks in the 'On Hold' stage owned by that user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""On Hold""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with priority 'low' and created by 'DEVU-456', then find similar work items.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""priority"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'development' stage created by DEVU-123,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""development""
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find issues with priority 'p1' or 'p2' created by user DEVU-456,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1"", ""p2""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-XYZ' and summarize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Action items from meeting' and add them to the current sprint.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from meeting""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current sprint ID and get similar work items to 'TKT-456'.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by user 'USR-789' in the 'To Do' stage.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-789""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and summarize all issues with severity 'blocker'.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-A' and create actionable tasks from the results,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-A""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'In Progress' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find issues associated with Rev organization 'REV-456' and summarize them.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-456""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current user and retrieve similar work items to 'FEAT-789'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-ABC' and prioritize them based on internal logic.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current sprint ID and add tasks with IDs 'TASK-1' and 'TASK-2' to the sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""TASK-1"", ""TASK-2""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Action items from meeting with Team-X'.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from meeting with Team-X""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Project-A' and get the current user's ID.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-A""
      }
    ]
  },
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current sprint ID and add issues with severity 'high' to the sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Action items from meeting with Team-Y' and get similar work items to 'TASK-789'.,"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from meeting with Team-Y""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TASK-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by the current user and in the 'Review' stage.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-B' and prioritize them based on internal logic.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-B""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and get similar work items to 'FEAT-987',"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-987""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Project-B' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-B""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current user's ID and create actionable tasks from the text 'Action items from meeting with Team-Z',"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from meeting with Team-Z""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-C' and get similar work items to 'TKT-987',"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-C""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-987""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and summarize all issues with severity 'medium'.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'Completed' stage owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Completed""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-XYZ' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current sprint ID and get similar work items to 'FEAT-111'.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-111""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all objects provided in the list of objects and create actionable tasks from the summary.,"[
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [{""id"": ""obj-9""}, {""id"": ""obj-10""}]
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'low' and associated with Rev organization 'REV-999',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-999""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'In Progress' stage with severity 'high' owned by users 'USR-777',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-777""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Project-C' and summarize them.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-C""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with priority 'p1' associated with Rev organization 'REV-777'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-777""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-E' and create actionable tasks from the results.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-E""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and get similar work items to 'FEAT-333'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-333""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-PQR' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-PQR""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current user's ID and get similar work items to 'FEAT-444'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-444""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'blocker' associated with Rev organization 'REV-123'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-123""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-A' and get similar work items to 'TKT-111'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-A""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-111""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add issues with IDs 'ISSUE-5' and 'ISSUE-6' to the sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""ISSUE-5"", ""ISSUE-6""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Project-D' and prioritize them based on internal logic.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-D""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and create actionable tasks from the text 'Action items from meeting with Team-Y'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from meeting with Team-Y""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-ABC' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-ABC""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current user's ID and get similar work items to 'FEAT-555'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-555""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'medium' and associated with Rev organization 'REV-888'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-888""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for all objects related to 'Client-X', get their IDs, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client-X""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get similar work items to 'ISSUE-123' and prioritize them based on internal logic.,"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISSUE-123""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Project-F' and create actionable tasks from the text 'Action items from Project-F'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-F""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from Project-F""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'high' associated with Rev organization 'REV-555'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-555""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Part-XYZ' and add them to the current sprint.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Part-XYZ""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the current user's ID and get similar work items to 'FEAT-666'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-666""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-Z' and get similar work items to 'TKT-789',"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""ISSUE-9"", ""ISSUE-10""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'In Progress' stage owned by 'USR-999' with priority 'p3'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-999""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p3""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'Project-G', get their IDs, and create actionable tasks from the text 'Action items from Project-G'","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-G""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from Project-G""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues in the 'Review' stage under part 'PART-XYZ' owned by the current user.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""Review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PART-XYZ""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user and get similar work items to 'FEAT-777'.,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-777""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'low' associated with Rev organization 'REV-777'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-777""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Customer-A' and create actionable tasks from the text 'Action items from Customer-A'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer-A""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Action items from Customer-A""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'To Do' stage owned by 'USR-999' with priority 'p2'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-999""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'In Progress' stage owned by 'USR-111' with priority 'p1'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-111""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Client-B' and get similar work items to 'TKT-999'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client-B""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-999""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'medium' associated with Rev organization 'REV-888'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-888""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to 'Project-H', get their IDs, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-H""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Client-C' and prioritize them based on internal logic.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client-C""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'To Do' stage owned by 'USR-777' with priority 'p2'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""To Do""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-777""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"""Retrieve the ID of the current user and get similar work items to 'FEAT-888'.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-888""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"""Search for objects related to 'Project-I', get their IDs, and add them to the current sprint.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Project-I""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'In Progress' stage owned by 'USR-555' with priority 'p1'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""In Progress""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-555""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Client-D' and get similar work items to 'TKT-555'.,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client-D""
      }
    ]
  },
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-555""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'high' associated with Rev organization 'REV-999'.,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-999""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items with priority P1 and owned by user DEVU-456,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p1""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""DEVU-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and add work items with IDs ['FEAT-111', 'ENH-222'] to it","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""['FEAT-111', 'ENH-222']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks similar to task_id 'TASK-789',"[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TASK-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find the Rev organizations associated with work items owned by user 'USER-987',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""USER-987""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for work items related to part 'PROD-567' created by users ['DEVU-001', 'DEVU-002']","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-567""
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": ""['DEVU-001', 'DEVU-002']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all high severity tickets associated with Rev organization 'REV-987' that need a response,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""['REV-987']""
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""high""
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": ""true""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items of type 'task' in the 'in-progress' stage,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'Customer123' and prioritize them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer123""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues created by the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and list all work items assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to 'PROD-789', add them to the current sprint, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-789""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by the current user and summarize them,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of work items with severity 'blocker' assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""blocker""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['ticket']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectX' and summarize them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectX""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all work items in the 'testing' stage under part 'FEAT-456',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""testing""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""FEAT-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to 'ENH-345', add them to the current sprint, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ENH-345""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by the current user and add them to the current sprint,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues in the 'backlog' stage and prioritize them,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""backlog""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'Client456' and create actionable tasks from them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client456""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-789',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to 'TKT-567', add them to the current sprint, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-567""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectY' and add them to the current sprint,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectY""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review feedback and incorporate changes',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review feedback and incorporate changes""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'Client789' and summarize them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'validation' stage under part 'ENH-789',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""validation""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all issues with severity 'medium' and prioritize them,"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""medium""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and list all tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Discuss project updates in the team meeting',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Discuss project updates in the team meeting""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectZ' and prioritize them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'review' stage under part 'ENH-456',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""review""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-567', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-567""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks owned by the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'testing' stage under part 'PROD-012',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""testing""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-012""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review customer feedback and incorporate changes',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review customer feedback and incorporate changes""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'Client111' and add them to the current sprint,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Client111""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues with priority 'p0' created by the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p0""
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-review' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-review""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks in the 'pending' stage under part 'ENH-999',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""pending""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-999""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of issues assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Evaluate project risks and mitigation strategies',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Evaluate project risks and mitigation strategies""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectA' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectA""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'FEAT-999',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""FEAT-999""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'PROD-789', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'ENH-012',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-012""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ClientXYZ' and prioritize them,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-789', summarize them, and create issues from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues with severity 'blocker' assigned to the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""blocker""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of high priority tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""['p0', 'p1']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review and update project documentation',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review and update project documentation""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectXYZ' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-555',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-555""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'ENH-789', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ENH-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'TKT-123',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""TKT-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'PROD-123', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review and update project documentation',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review and update project documentation""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectXYZ' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-555',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-555""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'ENH-789', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ENH-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'TKT-123',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""TKT-123""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"et all work items similar to 'PROD-123', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'to-do' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""to-do""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Conduct client meeting for project X',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Conduct client meeting for project X""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectABC' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectABC""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'ENH-789',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-456', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-999',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-999""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-555', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-555""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review and implement feature XYZ',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review and implement feature XYZ""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ClientABC' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientABC""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'ENH-111',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-111""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-789', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-333',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-333""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-999', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-999""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items similar to 'FEAT-789' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"""Prioritize objects from the list given."""," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-123"",
            ""type"": ""task""
          },
          {
            ""id"": ""OBJ-456"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-789"",
            ""type"": ""ticket""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Add work items 'WORK-789' and 'WORK-890' to the sprint 'SPR-456'.," [
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""WORK-789"", ""WORK-890""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""SPR-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for the object related to 'CustomerXYZ'.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from text data.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""This is a sample text containing actionable insights.""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items of type 'issue' and 'ticket'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue"", ""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current user.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Filter for tasks that need a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items that need attention from Rev organization 'REV-789'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""REV-789""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects of various types.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-123"",
            ""type"": ""task""
          },
          {
            ""id"": ""OBJ-456"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-789"",
            ""type"": ""ticket""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items similar to 'PROD-567' and add them to the current sprint.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-567""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items owned by user 'USR-456'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items in the 'triage' stage related to part 'PART-890'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""triage""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-890""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve issues with 'high' severity and needing a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar work items to 'TKT-567' and create actionable tasks.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-567""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for an object related to 'CustomerABC'.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and prioritize objects.," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-111"",
            ""type"": ""task""
          },
          {
            ""id"": ""OBJ-222"",
            ""type"": ""issue""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items similar to 'ISS-789' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from a provided text sample and add them to the current sprint.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Sample text with actionable items.""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects 'OBJ-123' and 'OBJ-456'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-123"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-456"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar work items to 'ISS-789' and prioritize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-789""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and create actionable tasks from a given text.," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable items from text.""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items in the 'review' stage related to 'PART-890'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-890""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'CustomerXYZ' and get their summaries.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items with severity 'blocker' and needing a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-111' and 'OBJ-222'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-111"",
            ""type"": ""task""
          },
          {
            ""id"": ""OBJ-222"",
            ""type"": ""issue""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from given text and add them to the current sprint.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable insights from text.""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items similar to 'TKT-999' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-999""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar work items to 'ISS-123' and prioritize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-123""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get objects related to 'CustomerABC' and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and create tasks from text data.," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable tasks from provided text.""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items in the 'progress' stage related to 'PART-567'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""progress""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-567""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-567' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-567""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Filter for tasks with severity 'high' and needing attention.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-333' and 'OBJ-444'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-333"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-444"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List tickets related to 'Cust-123' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-123""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from given text and add them to the current sprint.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable items from provided text.""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items similar to 'TKT-789' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects 'OBJ-001' and 'OBJ-002'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-001"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-002"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar work items to 'ISS-456' and prioritize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-456""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get objects related to 'CustomerXYZ' and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and create tasks from text data.," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable tasks from provided text.""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items in the 'progress' stage related to 'PART-890'," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""progress""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-890""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-567' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-567""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Filter for tasks with severity 'high' and needing attention.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-003' and 'OBJ-004'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-003"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-004"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List tickets related to 'Cust-123' needing a respons.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-123""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from given text and add them to the current sprint.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable items from provided text.""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve objects 'OBJ-001' and 'OBJ-002' and summarize them.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-001"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-002"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items similar to 'ISS-456' and prioritize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-456""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get objects related to 'CustomerXYZ' and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and create tasks from text data."""," [
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable tasks from provided text.""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items in the 'progress' stage related to 'PART-890'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""progress""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-890""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-567' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-567""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Filter for tasks with severity 'high' and needing attention.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-003' and 'OBJ-004.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-003"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-004"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve issues similar to 'ISS-789' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-789""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks for 'CustomerXYZ' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects 'OBJ-005' and 'OBJ-006'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-005"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-006"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items in the 'development' stage for 'PART-567'.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""development""]
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PART-567""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-007' and 'OBJ-008'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-007"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-008"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tickets related to 'Cust-789' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-789""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create tasks from provided text and add them to the current sprint.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable items from text.""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get similar work items to 'TKT-012' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-012""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items owned by me in 'review' stage.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to 'TKT-999' and prioritize them."""," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-999""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks 'OBJ-009' and 'OBJ-010'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-009"",
            ""type"": ""task""
          },
          {
            ""id"": ""OBJ-010"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve issues from 'CustomerABC' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks with severity 'blocker' needing attention," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize objects 'OBJ-011' and 'OBJ-012'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""OBJ-011"",
            ""type"": ""issue""
          },
          {
            ""id"": ""OBJ-012"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tickets related to 'Cust-890' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-890""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get similar work items to 'TKT-111' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-111""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items owned by me in the 'review' stage.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-999' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-999""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Query: ""Find similar items to 'PROD-001' and add them to the current sprint."," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""PROD-001""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects 'ISS-001' and 'TKT-002'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""ISS-001"",
            ""type"": ""issue""
          },
          {
            ""id"": ""TKT-002"",
            ""type"": ""ticket""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve tasks created by 'DEV-789' needing a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEV-789""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find high priority tasks needing a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize items 'TKT-003' and 'TKT-004'.," [
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""TKT-003"",
            ""type"": ""ticket""
          },
          {
            ""id"": ""TKT-004"",
            ""type"": ""ticket""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for items related to 'CustomerXYZ' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue"", ""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items owned by 'USR-007' in the 'development' stage.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""development""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-007""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-001' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-001""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get similar work items to 'ISS-004' and add them to the current sprint.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-004""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]\","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects 'TASK-001' and 'TASK-002'.," [
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [
          {
            ""id"": ""TASK-001"",
            ""type"": ""task""
          },
          {
            ""id"": ""TASK-002"",
            ""type"": ""task""
          }
        ]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find tasks owned by 'USR-009' in the 'review' stage.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-009""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for items related to 'Customer123' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer123""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue"", ""ticket""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from provided text 'Meeting Notes'.," [
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Meeting Notes""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get work items owned by 'USR-004' in the 'development' stage.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""development""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-004""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-002' needing a response.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-002""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get similar work items to 'ISS-005' and add them to the current sprint.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-005""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve work items created by 'DEV-007' needing a response.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEV-007""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Identify high priority work items created by 'DEV-005' and add them to the current sprint."""," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEV-005""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue"", ""ticket""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[1]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-004' needing a response and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-004""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve tasks owned by 'USR-011' in the 'development' stage and prioritize them.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""development""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-011""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[1]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar items to 'TKT-008' and create actionable tasks from the text.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-008""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable insights from similar items.""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'CustomerABC' and get the ID of the current sprint.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find high priority tasks needing a response and summarize them.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve issues created by 'DEV-012' needing a response and prioritize them.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEV-012""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find similar work items to 'ISS-009' and add them to the current sprint.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISS-009""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-007' and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-007""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve tasks owned by 'USR-013' in the 'review' stage and prioritize them.," [
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-013""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""task""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[1]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items similar to 'TASK-005' and add them to the sprint after summarizing," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TASK-005""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[1]""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve high-priority issues assigned to 'USR-015' and add them to the current sprint.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0"", ""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""USR-015""]
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": [""$$PREV[0]""]
      },
      {
        ""argument_name"": ""sprint","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'CustomerX' requiring a response and summarize them.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue"", ""ticket""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]"", ""$$PREV[1]""]
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Identify similar items to 'TKT-010' and create actionable tasks from the findings.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-010""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Actionable insights from similar items.""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve issues created by 'DEV-018' needing a response and prioritize them.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEV-018""]
      },
      {
        ""argument_name"": ""ticket.needs_response"",
        ""argument_value"": true
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": [""issue""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": [""$$PREV[0]""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to 'Cust-010' and retrieve the ID of the current sprint.," [
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Cust-010""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find issues similar to 'TKT-456' and summarize them.," [
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get all high severity tickets associated with Rev organization 'REV-789' and prioritize them.," [
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""REV-789""
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": ""high""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Develop new feature ABC',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Develop new feature ABC""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectXYZ' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks in the 'backlog' stage assigned to the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""backlog""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of issues assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['issue']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review and approve project proposal',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review and approve project proposal""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ClientXYZ' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'ENH-222',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-222""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-111', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-111""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-222',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-222""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-222', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-222""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Develop new feature XYZ',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Develop new feature XYZ""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ProjectABC' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectABC""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'ENH-333',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-333""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-333', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-333""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-333',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-333""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-333', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-333""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current user's ID and return a list of work items assigned to them,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all work items with priority 'p2' owned by the current user,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": ""p2""
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'FEAT-456',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""FEAT-456""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Review and approve design proposal',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Review and approve design proposal""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-987', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-987""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-777',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-777""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-123', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-123""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by the current user in the 'in-progress' stage,"[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text 'Develop new feature XYZ',"[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Develop new feature XYZ""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for objects related to the query 'ClientXYZ' and list all work items under it,"[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'in-progress' stage under part 'ENH-789',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""in-progress""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""ENH-789""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'TKT-567', summarize them, and prioritize them","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TKT-567""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'completed' stage under part 'PROD-999',"[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": ""completed""
      },
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": ""PROD-999""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get all work items similar to 'FEAT-456', summarize them, and create tasks from that summary","[
  {
    ""tool_name"": ""get_similar_work_items"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""FEAT-456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and return a list of tasks assigned to it,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""type"",
        ""argument_value"": ""['task']""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by user DEVU-456 with severity 'blocker' and add them to the current sprint.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""DEVU-456""
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""blocker""
         }
      ]
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Find work items similar to 'PROD-789' and summarize them.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""PROD-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for the object with the name 'CustomerXYZ' and list all work items associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CustomerXYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all work items in the 'development' stage owned by user 'DEVU-789'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""development""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""DEVU-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues related to part 'FEAT-456' with severity 'high'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""FEAT-456""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items similar to 'TKT-987' and create actionable tasks from the summary.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""TKT-987""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all P1 issues owned by me to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[2]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after prioritizing a list of tasks and issues.,"[
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": [""task1"", ""issue2"", ""task3""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'user123' and list all tasks with a 'Rev' organization.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""user123""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": [""Rev""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Create actionable tasks from the text of the meeting transcript 'MeetingTranscript1' and add them to the current sprint.,"[
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""MeetingTranscript1""
         }
      ]
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'testing' stage owned by 'QA-Team'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""testing""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""QA-Team""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and prioritize P2 issues owned by me.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'Part123' and listing all tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Part123""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items with severity 'medium' and source channel 'email'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""email""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'User-789' and list all issues with severity 'blocker',"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""User-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""blocker""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks owned by 'DEVU-789' and add them to the current sprint.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""DEVU-789""
         }
      ]
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for 'PartXYZ' and summarize the associated work items.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""PartXYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get similar work items to 'FEAT-789', create tasks from the summary, and prioritize them","[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""FEAT-789""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'high' and source channel 'web'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""high""]
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""web""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all objects after searching for 'CustomerABC' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CustomerABC""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'approval' stage owned by 'Manager-123'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""approval""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""Manager-123""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks owned by me to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[2]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'TeamXYZ' and list all tasks and issues owned by user 'User-789',"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""TeamXYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-789""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after finding work items similar to 'PROD-987' and prioritize them.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""PROD-987""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": [""task1"", ""issue2"", ""task3""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'low' and add them to the current sprint.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""low""
         }
      ]
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-123' and list all issues with priority 'p2'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-123""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and prioritize P1 issues owned by 'Manager-456'.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""Manager-456""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with severity 'low' and source channel 'email'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""low""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""email""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all objects after searching for 'ProjectABC' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectABC""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'deployment' stage owned by 'OpsTeam-789'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""deployment""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""OpsTeam-789""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p3' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues with severity 'medium' and source channel 'web'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""web""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'TeamDelta' and summarize them.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""TeamDelta""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'medium' and add them to the current sprint.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""medium""
         }
      ]
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues similar to 'ENH-789' and create actionable tasks from the summary.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""ENH-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues with severity 'high' and source channel 'email'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""email""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-456' and prioritize P0 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-456""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p0""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p1' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'ProjectXYZ' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectXYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items in the 'review' stage owned by 'Lead-789'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": ""review""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""Lead-789""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with priority 'p2' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues with severity 'low' and priority 'p3'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""low""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'ProjectGamma' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectGamma""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues with severity 'medium' and source channel 'web'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""web""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'TeamAlpha' and prioritize P1 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""TeamAlpha""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p2' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-789' and list all tasks owned by user 'User-123'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-123""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize all tasks and issues with severity 'high' owned by 'TeamDelta'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""TeamDelta""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with priority 'p0' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p0""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-789' and list all issues with priority 'p1',"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'low' and source channel 'web'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""low""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""web""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'ProjectAlpha' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectAlpha""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p2' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'TeamBeta' and prioritize P3 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""TeamBeta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with priority 'p1' and source channel 'email'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""email""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p3' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-456' and list all tasks owned by user 'User-789'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-456""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-789""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues similar to 'ENH-456' and create actionable tasks from the summary.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""ENH-456""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'p0' and source channel 'slack'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p0""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""slack""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'medium' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'ProjectBeta' and prioritize P2 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectBeta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-ABC' and list all tasks owned by user 'User-XYZ'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-ABC""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-XYZ""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'low' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""low""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'ProjectDelta' and listing issues associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectDelta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks and issues with severity 'medium' and source channel 'email'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task"", ""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""email""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-XYZ' and prioritize P2 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-XYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'ProjectGamma' and list all issues with severity 'high'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectGamma""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'p0' and source channel 'slack'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p0""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""slack""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'high' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Customer-789' and list all tasks owned by user 'User-456'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-456""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues similar to 'ENH-789' and create actionable tasks from the summary.,"[
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""ENH-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks with priority 'p1' and source channel 'web'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""ticket.source_channel"",
            ""argument_value"": [""web""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'high' and 'low' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""high"", ""low""]
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'ProjectTheta' and prioritize P1 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectTheta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all work items owned by 'User-789' and summarize them.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Alpha' and prioritize P1 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Alpha""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks with priority 'p2' and owned by 'User-123'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-123""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks owned by 'User-456' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-456""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with priority 'p3' and summarize them.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-456' and prioritize P2 tasks.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-456""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'low' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""low""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Gamma' and list all tasks with priority 'p1'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Gamma""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize objects after searching for 'Customer-789' and listing tasks associated with it.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Customer-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p3' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Delta' and prioritize P2 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Delta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks with priority 'p1' and owned by 'User-789'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'medium' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-789' and list all tasks with priority 'p2'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p1' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all tasks created by 'User-789' and summarize them.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": [""User-789""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Beta' and prioritize P3 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Beta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize issues with severity 'high' and owned by 'User-123'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""high""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-123""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks owned by 'User-456' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-456""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
List all issues with priority 'p2' and summarize them.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-456' and prioritize P1 tasks.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-456""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'low' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""low""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Gamma' and list all tasks with priority 'p1'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Gamma""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all tasks with priority 'p3' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p3""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Project-Delta' and prioritize P2 issues.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Project-Delta""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Summarize tasks with priority 'p1' and owned by 'User-789'.,"[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p1""
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""User-789""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the ID of the current sprint and add all issues with severity 'medium' to that sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""issue""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": ""medium""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Search for work items related to 'Client-789' and list all tasks with priority 'p2'.,"[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""Client-789""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": ""p2""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items owned by user ""DEVU-456"" with priority ""p1"" and summarize them.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-456""]
         },
         {
            ""argument_name"": ""issue.priority"",
            ""argument_value"": [""p1""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tickets associated with Rev organization ""REV-456"" and owned by user ""DEVU-789""","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": [""REV-456""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-789""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for an object with the query ""ImportantPart"" and create actionable tasks from the text.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ImportantPart""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Get the current user's ID and return the ID of the current sprint.,"[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items in the triage stage under part ""PROD-456"" and prioritize them.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""triage""]
         },
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": [""PROD-456""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ImportantCustomer,"" list all tasks associated with them, and summarize the tasks.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ImportantCustomer""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Prioritize all work items in the current sprint and add them to a new sprint.,"[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[2]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all objects returned from a search for ""CriticalPart.""","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalPart""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items owned by users ""DEVU-123"" and ""DEVU-456"" that need a response.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-123"", ""DEVU-456""]
         },
         {
            ""argument_name"": ""ticket.needs_response"",
            ""argument_value"": []
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-789.""","[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""TKT-789""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""design"" stage with severity ""medium"" and owned by the current user.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""design""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""medium""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectXYZ,"" get the Rev organizations associated with them, and return a list of work items for those Rev organizations.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectXYZ""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all work items associated with part ""ENH-456"" and prioritize them.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": [""ENH-456""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items of type ""task"" and create actionable tasks from their descriptions.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" get their IDs, and summarize them.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalComponent""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""PROD-789"" owned by the current user and in the ""testing"" stage.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": [""PROD-789""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": ""$$PREV[0]""
         },
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""testing""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""high"" created by that user.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""high""]
         },
         {
            ""argument_name"": ""created_by"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""FEAT-789"" and owned by user ""DEVU-789"" that need a response.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": [""FEAT-789""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-789""]
         },
         {
            ""argument_name"": ""ticket.needs_response"",
            ""argument_value"": []
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" list all tasks associated with them, and create actionable tasks from their descriptions.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalTask""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items associated with the current sprint, summarize them, and prioritize.","[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[2]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ImportantProject,"" get their Rev organizations, and list work items associated with those Rev organizations.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ImportantProject""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all high severity tickets owned by user ""DEVU-789"" that need a response.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""high""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-789""]
         },
         {
            ""argument_name"": ""ticket.needs_response"",
            ""argument_value"": []
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and create actionable tasks from their descriptions.","[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""create_actionable_tasks_from_text"",
      ""arguments"": [
         {
            ""argument_name"": ""text"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalFeature,"" get their IDs, and prioritize them.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalFeature""
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items owned by the current user with severity ""blocker"" and summarize them.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""$$PREV[0]""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""blocker""]
         }
      ]
   },
   {
      ""tool_name"": ""summarize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[1]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items in the ""development"" stage owned by user ""DEVU-456"" and prioritize them.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""development""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-456""]
         }
      ]
   },
   {
      ""tool_name"": ""prioritize_objects"",
      ""arguments"": [
         {
            ""argument_name"": ""objects"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" list all tasks associated with them, and add them to the current sprint.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalComponent""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""type"",
            ""argument_value"": [""task""]
         },
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-456.","[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""TKT-456""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalProject,"" get their Rev organizations, and list work items for those Rev organizations
","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""CriticalProject""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items in the ""review"" stage with severity ""low"" owned by user ""DEVU-123.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""stage.name"",
            ""argument_value"": [""review""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""low""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-123""]
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items owned by the current user with severity ""medium"" and add them to a new sprint.","[
   {
      ""tool_name"": ""who_am_i"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""$$PREV[0]""]
         },
         {
            ""argument_name"": ""ticket.severity"",
            ""argument_value"": [""medium""]
         }
      ]
   },
   {
      ""tool_name"": ""add_work_items_to_sprint"",
      ""arguments"": [
         {
            ""argument_name"": ""work_ids"",
            ""argument_value"": ""$$PREV[1]""
         },
         {
            ""argument_name"": ""sprint_id"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectABC,"" get their Rev organizations, and return a list of work items for those Rev organizations.","[
   {
      ""tool_name"": ""search_object_by_name"",
      ""arguments"": [
         {
            ""argument_name"": ""query"",
            ""argument_value"": ""ProjectABC""
         }
      ]
   },
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""ticket.rev_org"",
            ""argument_value"": ""$$PREV[0]""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-789.""","[
   {
      ""tool_name"": ""get_sprint_id"",
      ""arguments"": []
   },
   {
      ""tool_name"": ""get_similar_work_item"",
      ""arguments"": [
         {
            ""argument_name"": ""work_id"",
            ""argument_value"": ""TKT-789""
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""ENH-789"" owned by user ""DEVU-456"" that need a response.","[
   {
      ""tool_name"": ""works_list"",
      ""arguments"": [
         {
            ""argument_name"": ""applies_to_part"",
            ""argument_value"": [""ENH-789""]
         },
         {
            ""argument_name"": ""owned_by"",
            ""argument_value"": [""DEVU-456""]
         },
         {
            ""argument_name"": ""ticket.needs_response"",
            ""argument_value"": []
         }
      ]
   }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all work items with severity ""medium"" and owned by the current user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" get their IDs, and prioritize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""analysis"" stage with severity ""high"" and owned by user ""DEVU-789.""","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""analysis""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and add them to a new sprint.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""tool_name"": ""get_sprint_id"",
                ""arguments"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectX,"" get their Rev organizations, and list work items for those Rev organizations.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ProjectX""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all work items with severity ""low"" and in the ""development"" stage owned by user ""DEVU-456.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items similar to ""TKT-789.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" get their IDs, and return a list of work items for those IDs.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalComponent""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""issue"", ""ticket"", ""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""ENH-123"" owned by the current user that need a response.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""ENH-123""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-456.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""PROD-789"" owned by the current user and in the ""testing"" stage.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PROD-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""testing""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""high"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""FEAT-789"" and owned by user ""DEVU-789"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" list all tasks associated with them, and create actionable tasks from their descriptions.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-123.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" get their IDs, and summarize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""design"" stage owned by user ""DEVU-456"" with severity ""medium.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""design""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and create actionable tasks from their descriptions.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ImportantFeature,"" get their IDs, and prioritize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ImportantFeature""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items owned by the current user with severity ""blocker"" in the ""development"" stage.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""$$PREV[0]""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items similar to ""TKT-456.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""ENH-456"" owned by user ""DEVU-789"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""ENH-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-789.""","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectY,"" get their Rev organizations, and list work items for those Rev organizations.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ProjectY""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.rev_org"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all work items with severity ""high"" and in the ""testing"" stage owned by user ""DEVU-456","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""testing""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""medium"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""PROD-123"" and owned by user ""DEVU-123"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PROD-123""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-123""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-123.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""triage"" stage under part ""FEAT-456"" owned by the current user. Summarize them.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""triage""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" get their IDs, and return a list of work items for those IDs.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalComponent""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""issue"", ""ticket"", ""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Get the current user's ID and return a list of work items similar to ""TKT-789.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""review"" stage under part ""ENH-456"" owned by the current user. Summarize them.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""review""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""ENH-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Get the current sprint ID and return a list of work items similar to ""TKT-123.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""analysis"" stage owned by user ""DEVU-456"" with severity ""low.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""analysis""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and add them to a new sprint.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""tool_name"": ""get_sprint_id"",
                ""arguments"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ImportantFeature,"" get their IDs, and list work items for those IDs","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ImportantFeature""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""issue"", ""ticket"", ""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""PROD-789"" and owned by user ""DEVU-789"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PROD-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""FEAT-789"" owned by the current user and in the ""testing"" stage.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""testing""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""high"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" list all tasks associated with them, and create actionable tasks from their descriptions.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-123.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""triage"" stage under part ""FEAT-456"" owned by the current user. Summarize them.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""triage""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""medium"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" get their IDs, and prioritize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalComponent""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items owned by the current user with severity ""blocker"" in the ""development"" stage.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""$$PREV[0]""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items similar to ""TKT-456.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items associated with part ""ENH-789"" owned by user ""DEVU-123"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""ENH-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-123""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-789.""","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""PROD-456"" and owned by user ""DEVU-456"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PROD-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-123.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""triage"" stage under part ""FEAT-789"" owned by the current user. Summarize them.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""triage""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint and return a list of work items similar to ""TKT-456.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""design"" stage owned by user ""DEVU-789"" with severity ""medium.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""design""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and add them to a new sprint.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ImportantFeature,"" get their IDs, and prioritize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""ImportantFeature""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-789.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-789""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" List all work items in the ""analysis"" stage owned by user ""DEVU-456"" with severity ""low.""","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""analysis""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and create actionable tasks from their descriptions.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""high"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" list all tasks associated with them, and create actionable tasks from their descriptions.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""create_actionable_tasks_from_text"",
        ""arguments"": [
            {
                ""argument_name"": ""text"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" List all work items in the ""triage"" stage under part ""FEAT-456"" owned by the current user. Summarize them.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""triage""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""FEAT-456""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[1]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalComponent,"" get their IDs, and return a list of work items for those IDs.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalComponent""
            }
        ]
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""type"",
                ""argument_value"": [""issue"", ""ticket"", ""task""]
            },
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current user's ID and return a list of work items with severity ""medium"" created by that user.","[
    {
        ""tool_name"": ""who_am_i"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""medium""]
            },
            {
                ""argument_name"": ""created_by"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""coding"" stage owned by user ""DEVU-123"" with severity ""high.""","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""coding""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-123""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""high""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and add them to a new sprint.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items with severity ""blocker"" and in the ""development"" stage. Summarize them.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""blocker""]
            },
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""development""]
            }
        ]
    },
    {
        ""tool_name"": ""summarize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-456.""","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-456""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CriticalTask,"" get their IDs, and prioritize them.","[
    {
        ""tool_name"": ""search_object_by_name"",
        ""arguments"": [
            {
                ""argument_name"": ""query"",
                ""argument_value"": ""CriticalTask""
            }
        ]
    },
    {
        ""tool_name"": ""prioritize_objects"",
        ""arguments"": [
            {
                ""argument_name"": ""objects"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the current sprint ID and return a list of work items similar to ""TKT-123.""","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""get_similar_work_item"",
        ""arguments"": [
            {
                ""argument_name"": ""work_id"",
                ""argument_value"": ""TKT-123""
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all work items in the ""analysis"" stage owned by user ""DEVU-456"" with severity ""low.""","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""stage.name"",
                ""argument_value"": [""analysis""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-456""]
            },
            {
                ""argument_name"": ""ticket.severity"",
                ""argument_value"": [""low""]
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Get the ID of the current sprint, find work items associated with it, and add them to a new sprint.","[
    {
        ""tool_name"": ""get_sprint_id"",
        ""arguments"": []
    },
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""sprint_id"",
                ""argument_value"": ""$$PREV[0]""
            }
        ]
    },
    {
        ""tool_name"": ""add_work_items_to_sprint"",
        ""arguments"": [
            {
                ""argument_name"": ""work_ids"",
                ""argument_value"": ""$$PREV[1]""
            },
            {
                ""tool_name"": ""get_sprint_id"",
                ""arguments"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items associated with part ""PROD-789"" and owned by user ""DEVU-789"" that need a response.","[
    {
        ""tool_name"": ""works_list"",
        ""arguments"": [
            {
                ""argument_name"": ""applies_to_part"",
                ""argument_value"": [""PROD-789""]
            },
            {
                ""argument_name"": ""owned_by"",
                ""argument_value"": [""DEVU-789""]
            },
            {
                ""argument_name"": ""ticket.needs_response"",
                ""argument_value"": []
            }
        ]
    }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks related to part ""PROD-789"" created by user ""DEVU-456"".","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""PROD-789""]
      },
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to the query ""Customer123"", retrieve the associated work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""Customer123""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.rev_org"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all work items owned by that user in the ""triage"" stage. Summarize the results.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""triage""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Given a text ""MeetingNotes"", create actionable tasks from the text, retrieve the current sprint ID, and add the tasks to the sprint.","[
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""MeetingNotes""
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and list all work items associated with that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find all work items similar to ""ISSUE-789"" and prioritize them.","[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ISSUE-789""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectX,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""In Progress"" stage, owned by the current user, and summarize them.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""In Progress""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and create actionable tasks from a given text ""Project Update.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Project Update""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks owned by ""DEVU-789"" with a severity of ""blocker"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and add all tasks owned by the current user to that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks associated with part ""CAPL-456"" and owned by user ""DEVU-789.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""CAPL-456""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerABC,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerABC""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" List all tasks with priority ""p2"" and owned by ""DEVU-789,"" then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add all tasks with severity ""high"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and list all tasks associated with that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks in the ""backlog"" stage owned by ""DEVU-789.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""backlog""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and add all tasks with priority ""p0"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectY,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectY""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the ID of the current sprint and list all tasks with severity ""medium"" associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks created by ""DEVU-789"" and add them to the current sprint.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""created_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[0]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to ""TASK-456"" and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""TASK-456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks in the ""completed"" stage owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""completed""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks associated with part ""ENH-789"" and owned by ""DEVU-456,"" then prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""applies_to_part"",
        ""argument_value"": [""ENH-789""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectZ,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and add all tasks with priority ""p1"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with severity ""low"" and owned by the current user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Summarize all tasks in the ""triage"" stage with severity ""high"" owned by ""DEVU-123.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""triage""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add all tasks with severity ""medium"" and ""low"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium"", ""low""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks with severity ""high"" owned by ""DEVU-456.""","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerXYZ,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerXYZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and create actionable tasks from a given text ""Weekly Update.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Weekly Update""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""pending"" stage with priority ""p1"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""pending""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks in the ""in-progress"" stage owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""in-progress""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Find work items similar to ""ENH-456"" and summarize them.","[
  {
    ""tool_name"": ""get_similar_work_item"",
    ""arguments"": [
      {
        ""argument_name"": ""work_id"",
        ""argument_value"": ""ENH-456""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
Retrieve the ID of the current sprint and list all tasks associated with that sprint.,"[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""backlog"" stage with severity ""blocker"" owned by ""DEVU-456.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""backlog""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectA,"" retrieve the work items, and create actionable tasks from the summary.
","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectA""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with priority ""p2"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with severity ""medium"" and ""high"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium"", ""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks in the ""to-do"" stage owned by ""DEVU-123.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""to-do""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and list all tasks with severity ""low"" associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerB,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerB""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerB,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerB""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with severity ""blocker"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks in the ""review"" stage owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current sprint ID and list all tasks with severity ""medium"" owned by ""DEVU-123"" and add them to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Summarize all tasks with priority ""p0"" and owned by ""DEVU-789.""","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""completed"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""completed""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectX,"" retrieve the work items, and prioritize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with priority ""p1"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" List all tasks with severity ""high"" and ""medium"" owned by ""DEVU-456"" and summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high"", ""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and add all tasks with severity ""blocker"" and ""critical"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker"", ""critical""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and create actionable tasks from a given text ""Monthly Report.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Monthly Report""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""review"" stage with priority ""p2"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current user ID and list all tasks in the ""in-progress"" stage owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""in-progress""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ClientA,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientA""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""to-do"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""to-do""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""pending"" stage with severity ""medium"" owned by ""DEVU-123"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""pending""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and add all tasks with priority ""p0"" owned by ""DEVU-789"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Search for objects related to ""ProjectY,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectY""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""pending"" stage with severity ""low"" owned by ""DEVU-456"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""pending""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""in-progress"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""in-progress""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with severity ""blocker"" and ""critical"" owned by ""DEVU-123"" and summarize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""blocker"", ""critical""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks in the ""backlog"" stage owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""backlog""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]
","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ClientB,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientB""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add all tasks with severity ""high"" owned by ""DEVU-456"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with priority ""p2"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p2""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""completed"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""completed""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""triage"" stage with severity ""medium"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""triage""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and create actionable tasks from a given text ""Weekly Meeting Notes.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Weekly Meeting Notes""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks with priority ""p1"" owned by ""DEVU-456"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectZ,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectZ""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add all tasks with severity ""low"" owned by ""DEVU-123"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-123""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with severity ""medium"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""CustomerX,"" retrieve the work items, and create actionable tasks from the summary.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""CustomerX""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
  ""arguments"": [
    {
      ""argument_name"": ""owned_by"",
      ""argument_value"": ""$$PREV[0]""
    }
  ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""$$PREV[2]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""pending"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""pending""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""review"" stage with severity ""high"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""review""]
      },
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""high""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with priority ""p0"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p0""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ProjectA,"" retrieve the work items, and summarize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ProjectA""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""summarize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current sprint ID and add all tasks with severity ""medium"" owned by ""DEVU-456"" to that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""medium""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-456""]
      }
    ]
  },
  {
    ""tool_name"": ""add_work_items_to_sprint"",
    ""arguments"": [
      {
        ""argument_name"": ""work_ids"",
        ""argument_value"": ""$$PREV[1]""
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
" Retrieve the current user ID and create actionable tasks from a given text ""Monthly Report Update.""","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""create_actionable_tasks_from_text"",
    ""arguments"": [
      {
        ""argument_name"": ""text"",
        ""argument_value"": ""Monthly Report Update""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the ID of the current sprint and list all tasks in the ""ready for testing"" stage associated with that sprint.","[
  {
    ""tool_name"": ""get_sprint_id"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""ready for testing""]
      },
      {
        ""argument_name"": ""sprint_id"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Search for objects related to ""ClientB,"" retrieve the work items, and prioritize them.","[
  {
    ""tool_name"": ""search_object_by_name"",
    ""arguments"": [
      {
        ""argument_name"": ""query"",
        ""argument_value"": ""ClientB""
      }
    ]
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[1]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"Retrieve the current user ID and list all tasks with severity ""low"" owned by that user.","[
  {
    ""tool_name"": ""who_am_i"",
    ""arguments"": []
  },
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""ticket.severity"",
        ""argument_value"": [""low""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
"List all tasks in the ""completed"" stage with priority ""p1"" owned by ""DEVU-789"" and prioritize them.","[
  {
    ""tool_name"": ""works_list"",
    ""arguments"": [
      {
        ""argument_name"": ""stage.name"",
        ""argument_value"": [""completed""]
      },
      {
        ""argument_name"": ""issue.priority"",
        ""argument_value"": [""p1""]
      },
      {
        ""argument_name"": ""owned_by"",
        ""argument_value"": [""DEVU-789""]
      }
    ]
  },
  {
    ""tool_name"": ""prioritize_objects"",
    ""arguments"": [
      {
        ""argument_name"": ""objects"",
        ""argument_value"": ""$$PREV[0]""
      }
    ]
  }
]","You are an AI assistant designed to help developers in their day to day tasks by automating their requests using tools available to them.

The actions defined in this domain are:

The works_list action: Returns a list of work items matching the request. It has the following parameters: 
	applies_to_part: Filters for work belonging to any of the provided parts.
	created_by: Filters for work created by any of these users.
	issue.priority: Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3.
	issue.rev_orgs: Filters for issues with any of the provided Rev organizations.
	limit: The maximum number of works to return. The default is '50'.
	owned_by: Filters for work owned by any of these users.
	stage.name: Filters for records in the provided stage(s) by name.
	ticket.needs_response: Filters for tickets that need a response.
	ticket.rev_org: Filters for tickets associated with any of the provided Rev organizations.
	ticket.severity: Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium.
	ticket.source_channel: Filters for tickets with any of the provided source channels.
	type: Filters for work of the provided types. Allowed values: issue, ticket, task.


The summarize_objects action: Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail. It has the following parameters: 
	objects: List of objects to summarize.


The prioritize_objects action: Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail. It has the following parameters: 
	objects: A list of objects to be prioritized.


The add_work_items_to_sprint action: Adds the given work items to the sprint. It has the following parameters: 
	work_ids: A list of work item IDs to be added to the sprint.
	sprint_id: The ID of the sprint to which the work items should be added.


The get_sprint_id action: Returns the ID of the current sprint. It has no parameters. 

The get_similar_work_items action: Returns a list of work items that are similar to the given work item. It has the following parameters: 
	work_id: The ID of the work item for which you want to find similar items.


The search_object_by_name action: Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest. It has the following parameters: 
	query: The search string, could be for example customer’s name, part name, user name.


The create_actionable_tasks_from_text action: Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item. It has the following parameters: 
	text: The text from which the actionable insights need to be created.


The who_am_i action: Returns the ID of the current user. It has no parameters. 
",
